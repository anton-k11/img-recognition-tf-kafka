services:
  zookeeper:
    extends:
      file: docker-compose/kafka-compose.yml
      service: zookeeper

  kafka-cmak:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-cmak

  kafka-broker1:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-broker1

  kafka-broker2:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-broker2

  init-kafka-broker:
    extends:
      file: docker-compose/kafka-compose.yml
      service: init-kafka-broker

  tf-img-recognition:
    # First execute ./gradlew.bat bootJar get a fresh copy
    build: 
      context: ./ml-img-recognition    
      dockerfile: Dockerfile
    container_name: tf-img-recognition
    #entrypoint: java -Xms256m -Xmx512m -XX:ParallelGCThreads=2 -jar myapp.jar
    depends_on:
      - init-kafka-broker
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_KAFKA_BOOTSTRAP-SERVERS: ${BOOTSTRAP_SERVERS}
      IMG_KAFKA_TOPIC: img-topic
      DECISION_KAFKA_TOPIC: decision-topic
    expose:
      - 8080

  image-producer:
    build: 
      context: ./image-producer
      dockerfile: Dockerfile
    deploy:
      replicas: 1
    depends_on:
      - init-kafka-broker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      IMG_KAFKA_TOPIC: img-topic
      IMG_DIRECTORY: /pictures
    volumes:
        - /home/pictures:/pictures

  image-decision-uploader:
    build: 
      context: ./image-ml-decision-uploader    
      dockerfile: Dockerfile
    container_name: image-decision-uploader
    depends_on:
      - init-kafka-broker
      - mock-aws-s3
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_KAFKA_BOOTSTRAP-SERVERS: ${BOOTSTRAP_SERVERS}
      IMG_KAFKA_TOPIC: img-topic
      DECISION_KAFKA_TOPIC: decision-topic
      S3_BUCKET-NAME: test-bucket
      # value are stored in application-dev.yml, because retrieraval from ENV variables is not supported
      S3_ACCESS-KEY-ID-PATH: aws_access_key_id
      S3_SECRET-ACCESS-KEY-PATH: aws_secret_access_key
      S3_ENDPOINT-OVERRIDE: http://mock-aws-s3:9000

  decision-consumer:
    build:
      context: ./decision-consumer
      dockerfile: Dockerfile
    container_name: decision-consumer
    depends_on:
      - init-kafka-broker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      DECISION_KAFKA_TOPIC: decision-topic

  mock-aws-s3:
  # Fork and modify code on https://github.com/scireum/s3ninja
    image: scireum/s3-ninja:latest
    container_name: mock-aws-s3
    expose:
      - 9000
    ports:
      - "9444:9000"
      

