services:
  zookeeper:
    extends:
      file: docker-compose/kafka-compose.yml
      service: zookeeper

  kafka-cmak:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-cmak

  kafka-broker1:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-broker1

  kafka-broker2:
    extends:
      file: docker-compose/kafka-compose.yml
      service: kafka-broker2

  init-kafka-broker:
    extends:
      file: docker-compose/kafka-compose.yml
      service: init-kafka-broker

  tf-img-recognition:
#    image: tf-img-recognition-cpu
    image: tf-img-recognition-gpu
    # First execute ./gradlew.bat bootJar get a fresh copy
    # build:
    #   context: ./ml-img-recognition
    #   dockerfile: Dockerfile
    #   args:
    #     #BASE_IMAGE: ubuntu:20.04
    #     # For GPU implementation nvidia driver must be installed on the host and
    #     # nvidia-container-runtime should be installed and configured properly
    #     BASE_IMAGE: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04
    # container_name: tf-img-recognition
    #entrypoint: java -Xms256m -Xmx512m -XX:ParallelGCThreads=2 -jar myapp.jar
    depends_on:
      - init-kafka-broker
    environment:
      #SPRING_PROFILES_ACTIVE: dev
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      IMG_KAFKA_TOPIC: img-topic
      DECISION_KAFKA_TOPIC: decision-topic
    # GPU runtime requires nvidia driver and nvidia-container-runtime to be installed and configured on the host
    deploy:
      replicas: ${REPLICAS}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  image-producer:
    build: 
      context: ./image-producer
      dockerfile: Dockerfile
    deploy:
      replicas: ${REPLICAS}
    depends_on:
      - init-kafka-broker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      IMG_KAFKA_TOPIC: img-topic
      IMG_DIRECTORY: /pictures
    volumes:
        - /home/pictures:/pictures:ro

  decision-consumer:
    build:
      context: ./decision-consumer
      dockerfile: Dockerfile
    # container_name: decision-consumer
    deploy:
      replicas: ${REPLICAS}
    depends_on:
      - init-kafka-broker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      DECISION_KAFKA_TOPIC: decision-topic

